Chemin : nuxt.config.ts
Titre : nuxt.config.ts
Contenu :
// https://nuxt.com/docs/api/configuration/nuxt-config
export default defineNuxtConfig({
  compatibilityDate: '2024-11-01',
  devtools: { enabled: true }
})
----------------------------------
Chemin : router/index.js
Titre : index.js
Contenu :
import { createRouter, createWebHistory } from 'vue-router';
import Login from '@/pages/Login.vue';
import Home from '@/pages/Home.vue';

const routes = [
    {
        path: '/login',
        name: 'Login',
        component: Login,
    },
    {
        path: '/home',
        name: 'Home',
        component: Home,
        meta: { requiresAuth: true },
    },
    {
        path: '/:pathMatch(.*)*',
        redirect: '/login',
    },
];

const router = createRouter({
    history: createWebHistory(),
    routes,
});

// Navigation guard pour protéger les routes
router.beforeEach((to, from, next) => {
    const token = localStorage.getItem('authToken');
    if (to.matched.some((record) => record.meta.requiresAuth) && !token) {
        // Redirection vers la page de login si non connecté
        next('/login');
    } else {
        next();
    }
});


export default router;
----------------------------------
Chemin : tsconfig.json
Titre : tsconfig.json
Contenu :
{
  // https://nuxt.com/docs/guide/concepts/typescript
  "extends": "./.nuxt/tsconfig.json"
}
----------------------------------
Chemin : Dockerfile-frontend
Titre : Dockerfile-frontend
Contenu :
# Dockerfile-frontend
FROM node:18-alpine

# Définir le dossier de travail
WORKDIR /app

# Copier uniquement les fichiers nécessaires pour l'installation des dépendances
COPY package*.json ./

# Installer les dépendances
RUN npm install

# Copier le reste des fichiers du projet
COPY . .

# Construire le projet
RUN npm run build

# Exposer le port de l'application
EXPOSE 3000

# Démarrer l'application
CMD ["npm", "start"]
----------------------------------
Chemin : middleware/auth.js
Titre : auth.js
Contenu :
export default function ({ store, redirect }) {
    const token = localStorage.getItem('authToken');
    if (!token) {
      return redirect('/login');
    }
  }
  
----------------------------------
Chemin : pages/Login.vue
Titre : Login.vue
Contenu :
<template>
    <div class="login-container">
      <h1>Se connecter</h1>
      <form @submit.prevent="handleLogin">
        <InputField
          v-model="form.username"
          label="Nom d'utilisateur"
          placeholder="Entrez votre nom d'utilisateur"
          type="text"
        />
        <InputField
          v-model="form.password"
          label="Mot de passe"
          placeholder="Entrez votre mot de passe"
          type="password"
        />
        <Button :isLoading="loading" label="Se connecter" />
      </form>
      <p v-if="error" class="error-message">{{ error }}</p>
    </div>
  </template>
  
  <script>
  import InputField from '@/components/InputField.vue';
  import Button from '@/components/Button.vue';
  import axios from 'axios';
  
  export default {
    components: { InputField, Button },
    data() {
      return {
        form: {
          username: '',
          password: '',
        },
        loading: false,
        error: null,
      };
    },
    methods: {
      async handleLogin() {
        this.loading = true;
        this.error = null;
        try {
          const response = await axios.post('http://localhost:8080/auth/login', this.form);
          const token = response.data;
  
          // Sauvegarder le token dans le localStorage
          localStorage.setItem('authToken', token);
  
          // Redirection vers la page d'accueil
          this.$router.push('/home');
        } catch (err) {
          console.error('Error:', err);
          this.error = err.response?.data?.message || 'Connexion échouée';
        } finally {
          this.loading = false;
        }
      },
    },
  };
  </script>
  
  <style scoped>
  .login-container {
    max-width: 400px;
    margin: auto;
    padding: 20px;
  }
  .error-message {
    color: red;
  }
  </style>
  
----------------------------------
Chemin : pages/Home.vue
Titre : Home.vue
Contenu :
<template>
    <div class="home-container">
        <h1>Bienvenue sur la page d'accueil</h1>
        <button @click="handleLogout">Se déconnecter</button>
    </div>
</template>

<script>
export default {
    middleware: 'auth',
    methods: {
        handleLogout() {
            // Supprimer le token du localStorage
            localStorage.removeItem('authToken');

            // Redirection vers la page de login
            this.$router.push('/login').then(() => {
                // Effacer l'historique de navigation pour empêcher le retour
                window.history.replaceState(null, '', '/login');
            });
        },
    }
};
</script>

<style scoped>
.home-container {
    text-align: center;
    padding: 20px;
}

button {
    padding: 10px 20px;
    background-color: #ff5722;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
}

button:hover {
    background-color: #e64a19;
}
</style>
----------------------------------
Chemin : pages/register.vue
Titre : register.vue
Contenu :
<template>
    <div class="register-container">
      <h1>Créer un compte</h1>
      <form @submit.prevent="handleRegister">
        <InputField
          v-model="form.username"
          label="Nom d'utilisateur"
          placeholder="Entrez votre nom d'utilisateur"
          type="text"
        />
        <InputField
          v-model="form.password"
          label="Mot de passe"
          placeholder="Entrez votre mot de passe"
          type="password"
        />
        <InputField
          v-model="form.skillLevel"
          label="Niveau de compétence"
          placeholder="Entrez votre niveau de compétence"
          type="number"
        />
        <InputField
          v-model="form.preferences.maxDistance"
          label="Distance maximale"
          placeholder="Entrez la distance maximale"
          type="text"
        />
        <InputField
          v-model="form.preferences.desiredSkillLevel"
          label="Niveau de compétence souhaité"
          placeholder="Entrez le niveau de compétence souhaité"
          type="number"
        />
        <Button :isLoading="loading" label="S'inscrire" />
      </form>
      <p v-if="error" class="error-message">{{ error }}</p>
    </div>
  </template>
  
  <script>
  import InputField from '@/components/InputField.vue';
  import Button from '@/components/Button.vue';
  import axios from 'axios';
  
  export default {
    components: { InputField, Button },
    data() {
      return {
        form: {
          username: '',
          password: '',
          skillLevel: 1,
          preferences: {
            maxDistance: '',
            desiredSkillLevel: '',
          },
        },
        loading: false,
        error: null,
      };
    },
    methods: {
      async handleRegister() {
        this.loading = true;
        this.error = null;
        try {
          const response = await axios.post('http://localhost:8080/auth/register', this.form);
          console.log('Success:', response.data);
          this.$router.push('/login');
        } catch (err) {
          console.error('Error:', err);
          this.error = err.response?.data?.message || 'Une erreur s\'est produite';
        } finally {
          this.loading = false;
        }
      },
    },
  };
  </script>
  
  <style scoped>
  .register-container {
    max-width: 500px;
    margin: 50px auto;
    padding: 20px;
    border-radius: 10px;
    background-color: #f9f9f9;
    box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
  }
  
  h1 {
    text-align: center;
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
  }
  
  form {
    display: flex;
    flex-direction: column;
    gap: 15px;
  }
  
  .error-message {
    color: #e74c3c;
    font-size: 14px;
    text-align: center;
  }
  
  input {
    border: 1px solid #ddd;
    border-radius: 5px;
    padding: 10px;
    font-size: 14px;
    outline: none;
    transition: all 0.3s ease;
  }
  
  input:focus {
    border-color: #3498db;
    box-shadow: 0 0 5px rgba(52, 152, 219, 0.5);
  }
  
  button {
    background-color: #3498db;
    color: white;
    border: none;
    padding: 10px 15px;
    font-size: 16px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
  }
  
  button:hover {
    background-color: #2980b9;
  }
  </style>
  
----------------------------------
Chemin : server/tsconfig.json
Titre : tsconfig.json
Contenu :
{
  "extends": "../.nuxt/tsconfig.server.json"
}
----------------------------------
Chemin : components/InputField.vue
Titre : InputField.vue
Contenu :
<template>
  <div class="input-container">
    <label :for="label" class="input-label">{{ label }}</label>
    <input
      :type="type"
      :id="label"
      :placeholder="placeholder"
      :value="modelValue"
      @input="$emit('update:modelValue', $event.target.value)"
      class="input-field"
    />
  </div>
</template>

<script setup>
defineProps(['label', 'placeholder', 'type', 'modelValue']);
defineEmits(['update:modelValue']);
</script>

<style scoped>
/* Conteneur du champ d'entrée */
.input-container {
  margin-bottom: 20px;
  display: flex;
  flex-direction: column;
  gap: 5px;
}

/* Label du champ */
.input-label {
  font-size: 0.9rem;
  font-weight: bold;
  color: #333333;
  margin-bottom: 5px;
}

/* Champ d'entrée */
.input-field {
  padding: 10px 15px;
  font-size: 1rem;
  border: 2px solid #ddd;
  border-radius: 8px;
  transition: border-color 0.3s, box-shadow 0.3s;
}

.input-field:focus {
  border-color: #2575fc;
  box-shadow: 0 0 8px rgba(37, 117, 252, 0.3);
  outline: none;
}

.input-field::placeholder {
  color: #aaa;
  font-style: italic;
}
</style>
----------------------------------
Chemin : components/Button.vue
Titre : Button.vue
Contenu :
<template>
    <button
      :type="type"
      class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline w-full"
    >
      Valider
    </button>
  </template>
  
  <script setup>
  defineProps(['text', 'type']);
  </script>
  
----------------------------------
Chemin : public/robots.txt
Titre : robots.txt
Contenu :

----------------------------------
Chemin : tailwind.config.js
Titre : tailwind.config.js
Contenu :
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
----------------------------------
Chemin : main.css
Titre : main.css
Contenu :
@tailwind base;
@tailwind components;
@tailwind utilities;
----------------------------------
Chemin : app.vue
Titre : app.vue
Contenu :
<template>
  <div>
    <NuxtPage />
  </div>
</template>
----------------------------------
Chemin : package.json
Titre : package.json
Contenu :
{
  "name": "nuxt-app",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "nuxt dev",
    "build": "nuxt build",
    "start": "nuxt start"
  },
  "dependencies": {
    "axios": "^1.7.9",
    "nuxt": "^3.14.1592",
    "vue": "latest",
    "vue-router": "latest"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.20",
    "postcss": "^8.4.49",
    "tailwindcss": "^3.4.16"
  }
}
----------------------------------
