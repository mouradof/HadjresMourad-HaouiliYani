Chemin : test/java/com/example/project_party/ProjectPartyApplicationTests.java
Titre : ProjectPartyApplicationTests.java
Contenu :
package com.example.project_party;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ProjectPartyApplicationTests {

	@Test
	void contextLoads() {
	}

}
----------------------------------
Chemin : main/resources/application.properties
Titre : application.properties
Contenu :
spring.datasource.url=jdbc:postgresql://db:5432/project_party
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA and Hibernate configurations
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl

# Spring application properties
spring.application.name=project-party
server.port=8080

#activer les logs
logging.level.org.springframework=DEBUG
logging.level.root=DEBUG

#swagger
spring.security.user.name=admin
spring.security.user.password=admin
----------------------------------
Chemin : main/java/com/example/project_party/security/SecurityConfig.java
Titre : SecurityConfig.java
Contenu :
package com.example.project_party.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(AbstractHttpConfigurer::disable) // Désactiver CSRF
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers(
                                "/auth/**", // Routes publiques (ajustez selon vos besoins)
                                "/v3/api-docs/**", // Swagger documentation
                                "/swagger-ui/**", // Swagger UI
                                "/swagger-ui.html" // Swagger UI HTML
                        ).permitAll() // Autoriser les requêtes publiques pour ces routes
                        .anyRequest().authenticated() // Nécessiter une authentification pour toutes les autres requêtes
                )
                .httpBasic(Customizer.withDefaults()); // Configurer HTTP Basic
        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/security/JwtUtil.java
Titre : JwtUtil.java
Contenu :
package com.example.project_party.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.stereotype.Component;

import javax.crypto.SecretKey;
import java.util.Date;

@Component
public class JwtUtil {

    private final SecretKey SECRET_KEY = Keys.secretKeyFor(SignatureAlgorithm.HS256);

    public String generateToken(String username) {
        return Jwts.builder()
                .setSubject(username)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 10)) // 10 heures
                .signWith(SECRET_KEY)
                .compact();
    }

    public String extractUsername(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(SECRET_KEY)
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/security/UserDetailsServiceImpl.java
Titre : UserDetailsServiceImpl.java
Contenu :
package com.example.project_party.security;

public class UserDetailsServiceImpl {
}
----------------------------------
Chemin : main/java/com/example/project_party/repository/MatchRepository.java
Titre : MatchRepository.java
Contenu :
package com.example.project_party.repository;

import com.example.project_party.model.Match;
import org.springframework.data.jpa.repository.JpaRepository;

public interface MatchRepository extends JpaRepository<Match, Long> {
}
----------------------------------
Chemin : main/java/com/example/project_party/repository/UserRepository.java
Titre : UserRepository.java
Contenu :
package com.example.project_party.repository;

import com.example.project_party.model.Users;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import java.util.Optional;

@Repository
public interface UserRepository extends JpaRepository<Users, Long> {
    Optional<Users> findByUsername(String username);
}
----------------------------------
Chemin : main/java/com/example/project_party/repository/PlayerRepository.java
Titre : PlayerRepository.java
Contenu :
package com.example.project_party.repository;

import com.example.project_party.model.Player;
import org.springframework.data.jpa.repository.JpaRepository;

public interface PlayerRepository extends JpaRepository<Player, Long> {
}
----------------------------------
Chemin : main/java/com/example/project_party/repository/EventRepository.java
Titre : EventRepository.java
Contenu :
package com.example.project_party.repository;

import com.example.project_party.model.Event;
import org.springframework.data.jpa.repository.JpaRepository;

public interface EventRepository extends JpaRepository<Event, Long> {
}
----------------------------------
Chemin : main/java/com/example/project_party/model/Match.java
Titre : Match.java
Contenu :
package com.example.project_party.model;

import jakarta.persistence.*;
import java.util.List;

@Entity
public class Match {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String type; // e.g., 1v1 or 5v5

    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    @JoinColumn(name = "match_id")
    private List<Player> players;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getType() {
        return type;
    }

    public void setType(String type) {
        this.type = type;
    }

    public List<Player> getPlayers() {
        return players;
    }

    public void setPlayers(List<Player> players) {
        this.players = players;
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/model/Player.java
Titre : Player.java
Contenu :
package com.example.project_party.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.Size;

@Entity
public class Player {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    @Size(min = 3, max = 255)
    private String username;

    @ManyToOne
    @JoinColumn(name = "user_id", nullable = false)
    private Users user;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public Users getUser() {
        return user;
    }

    public void setUser(Users user) {
        this.user = user;
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/model/Users.java
Titre : Users.java
Contenu :
package com.example.project_party.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import java.util.Map;

@Entity
@Table(name = "users")
public class Users {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    @Size(min = 3, max = 255)
    private String username;

    @Column(nullable = false)
    @Size(min = 8, max = 255)
    private String password;

    @Column(nullable = false)
    @Min(1)
    @Max(10)
    private Integer skillLevel;

    @ElementCollection
    @CollectionTable(name = "user_preferences", joinColumns = @JoinColumn(name = "user_id"))
    @MapKeyColumn(name = "preference_key")
    @Column(name = "preference_value")
    private Map<String, String> preferences;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Integer getSkillLevel() {
        return skillLevel;
    }

    public void setSkillLevel(Integer skillLevel) {
        this.skillLevel = skillLevel;
    }

    public Map<String, String> getPreferences() {
        return preferences;
    }

    public void setPreferences(Map<String, String> preferences) {
        this.preferences = preferences;
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/model/Event.java
Titre : Event.java
Contenu :
package com.example.project_party.model;

import jakarta.persistence.*;
import java.time.LocalDateTime;

@Entity
@Table(name = "events")
public class Event {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(nullable = false)
    private String name;

    @Column(nullable = false)
    private LocalDateTime date;

    @Column(nullable = false)
    private String location;

    @Column(nullable = false)
    private String description;

    @ManyToOne
    @JoinColumn(name = "organizer_id", nullable = false)
    private Users organizer;

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public LocalDateTime getDate() {
        return date;
    }

    public void setDate(LocalDateTime date) {
        this.date = date;
    }

    public String getLocation() {
        return location;
    }

    public void setLocation(String location) {
        this.location = location;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Users getOrganizer() {
        return organizer;
    }

    public void setOrganizer(Users organizer) {
        this.organizer = organizer;
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/service/UserService.java
Titre : UserService.java
Contenu :
package com.example.project_party.service;

import com.example.project_party.model.Users;
import com.example.project_party.repository.UserRepository;
import com.example.project_party.security.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import java.util.Map;
import java.util.Optional;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @Autowired
    private JwtUtil jwtUtil;

    public void registerUser(String username, String password, Integer skillLevel, Map<String, String> preferences) {
        Users user = new Users();
        user.setUsername(username);
        user.setPassword(password);
        user.setSkillLevel(skillLevel);
        user.setPreferences(preferences);
        userRepository.save(user);
    }

    public String authenticate(String username, String password) {
        Users user = userRepository.findByUsername(username)
                .orElseThrow(() -> new RuntimeException("Invalid username or password"));
        if (passwordEncoder.matches(password, user.getPassword())) {
            return jwtUtil.generateToken(username);
        }
        throw new RuntimeException("Invalid username or password");
    }

    public Optional<Users> findById(Long id) {
        return userRepository.findById(id);
    }

}
----------------------------------
Chemin : main/java/com/example/project_party/service/EventService.java
Titre : EventService.java
Contenu :
package com.example.project_party.service;

import com.example.project_party.model.Event;
import com.example.project_party.repository.EventRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class EventService {

    @Autowired
    private EventRepository eventRepository;

    public Event createEvent(Event event) {
        return eventRepository.save(event);
    }

    public Event updateEvent(Long id, Event updatedEvent) {
        Event existingEvent = eventRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Event not found"));
        existingEvent.setName(updatedEvent.getName());
        existingEvent.setDate(updatedEvent.getDate());
        existingEvent.setLocation(updatedEvent.getLocation());
        existingEvent.setDescription(updatedEvent.getDescription());
        return eventRepository.save(existingEvent);
    }

    public void deleteEvent(Long id) {
        eventRepository.deleteById(id);
    }

    public List<Event> getAllEvents() {
        return eventRepository.findAll();
    }

    public Event getEventById(Long id) {
        return eventRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Event not found"));
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/service/PlayerService.java
Titre : PlayerService.java
Contenu :
package com.example.project_party.service;

import com.example.project_party.model.Player;
import com.example.project_party.repository.PlayerRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class PlayerService {

    @Autowired
    private PlayerRepository playerRepository;

    public Player savePlayer(Player player) {
        return playerRepository.save(player);
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/service/MatchService.java
Titre : MatchService.java
Contenu :
package com.example.project_party.service;

import com.example.project_party.model.Match;
import com.example.project_party.repository.MatchRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class MatchService {
    @Autowired
    private MatchRepository matchRepository;

    public Match createMatch(Match match) {
        return matchRepository.save(match);
    }

    public Match getMatch(Long id) {
        return matchRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("Match not found"));
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/ProjectPartyApplication.java
Titre : ProjectPartyApplication.java
Contenu :
package com.example.project_party;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProjectPartyApplication {
	public static void main(String[] args) {
		SpringApplication.run(ProjectPartyApplication.class, args);
	}
}
----------------------------------
Chemin : main/java/com/example/project_party/controller/AuthController.java
Titre : AuthController.java
Contenu :
package com.example.project_party.controller;

import com.example.project_party.dto.RegisterRequest;
import com.example.project_party.model.Users;
import com.example.project_party.security.JwtUtil;
import com.example.project_party.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.Map;
import org.springframework.web.bind.annotation.RequestBody;

@RestController
@RequestMapping("/auth")
public class AuthController {
    @Autowired
    private UserService userService;

    @Autowired
    private JwtUtil jwtUtil;

    @PostMapping("/register")
    public ResponseEntity<String> register(@RequestBody RegisterRequest request) {
        Map<String, String> preferences = request.getPreferences();
        userService.registerUser(request.getUsername(), request.getPassword(), request.getSkillLevel(), preferences);
        return ResponseEntity.ok("User registered successfully");
    }

    @PostMapping("/login")
    public ResponseEntity<String> login(@RequestBody Users user) {
        String token = userService.authenticate(user.getUsername(), user.getPassword());
        return ResponseEntity.ok(token);
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/controller/MatchController.java
Titre : MatchController.java
Contenu :
package com.example.project_party.controller;

import com.example.project_party.model.Match;
import com.example.project_party.service.MatchService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/matches")
public class MatchController {
    @Autowired
    private MatchService matchService;

    @PostMapping("/create")
    public ResponseEntity<Match> createMatch(@RequestBody Match match) {
        return ResponseEntity.ok(matchService.createMatch(match));
    }

    @GetMapping("/{id}")
    public ResponseEntity<Match> getMatch(@PathVariable Long id) {
        return ResponseEntity.ok(matchService.getMatch(id));
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/controller/PlayerController.java
Titre : PlayerController.java
Contenu :
package com.example.project_party.controller;

import com.example.project_party.model.Player;
import com.example.project_party.model.Users;
import com.example.project_party.service.PlayerService;
import com.example.project_party.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/players")
public class PlayerController {

    @Autowired
    private UserService userService;

    @Autowired
    private PlayerService playerService;

    @PostMapping("/create")
    public ResponseEntity<Player> createPlayer(@RequestBody Player playerRequest) {
        // Vérification de l'existence de l'utilisateur
        Users user = userService.findById(playerRequest.getUser().getId())
                .orElseThrow(() -> new RuntimeException("User not found"));

        // Créer un joueur et l'associer à l'utilisateur existant
        Player player = new Player();
        player.setUsername(playerRequest.getUsername());
        player.setUser(user);

        // Sauvegarder le joueur dans la base de données
        playerService.savePlayer(player);

        return ResponseEntity.ok(player);
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/controller/EventController.java
Titre : EventController.java
Contenu :
package com.example.project_party.controller;

import com.example.project_party.model.Event;
import com.example.project_party.service.EventService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/events")
public class EventController {

    @Autowired
    private EventService eventService;

    @PostMapping
    public ResponseEntity<Event> createEvent(@RequestBody Event event) {
        return ResponseEntity.ok(eventService.createEvent(event));
    }

    @PutMapping("/{id}")
    public ResponseEntity<Event> updateEvent(@PathVariable Long id, @RequestBody Event event) {
        return ResponseEntity.ok(eventService.updateEvent(id, event));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteEvent(@PathVariable Long id) {
        eventService.deleteEvent(id);
        return ResponseEntity.noContent().build();
    }

    @GetMapping
    public ResponseEntity<List<Event>> getAllEvents() {
        return ResponseEntity.ok(eventService.getAllEvents());
    }

    @GetMapping("/{id}")
    public ResponseEntity<Event> getEventById(@PathVariable Long id) {
        return ResponseEntity.ok(eventService.getEventById(id));
    }
}
----------------------------------
Chemin : main/java/com/example/project_party/dto/RegisterRequest.java
Titre : RegisterRequest.java
Contenu :
package com.example.project_party.dto;

import java.util.Map;

public class RegisterRequest {
    private String username;
    private String password;
    private Integer skillLevel;
    private Map<String, String> preferences;

    // Getters et Setters
    public String getUsername() {
        return username;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public Integer getSkillLevel() {
        return skillLevel;
    }

    public void setSkillLevel(Integer skillLevel) {
        this.skillLevel = skillLevel;
    }

    public Map<String, String> getPreferences() {
        return preferences;
    }

    public void setPreferences(Map<String, String> preferences) {
        this.preferences = preferences;
    }
}
----------------------------------
